File类:
    相对路径:相对于某个路径下,指明剩余的路径
    绝对路径:包含盘符在内的所有路径
    路径分隔符: wimdows-->\\    nuix -->/
        File中的separator常量
    创建文件对象:
                new File(String filePath); 通过文件路径获取(相对路径/绝对路径)
                new File(String parentPath,String childPath);
                new File(File parentFile,String childPath);

IO流:
    根据流的流向 : 输入流,输出流
    根据流的角色 : 节点流:处理具体数据的流  ;  处理流:操作流的流
    根据操作数据的单位 : 字节流:Byte  ; 字符流:Char

    XxxStream(字节流) 和 XxxReader(字符流)的使用
    结论: 对于文本文件(.txt,.Java,.c,....)使用字符流处理
            -->只用于复制也是可以的,但是不能在内存层面去读取真正的内容
          对于非文本文件(.jpg,.mp3.avi,.ppt,....)使用字节流处理

    缓冲流:提高文件的读写效率
            原因: 内部提供了一个大小为8192的缓冲区

    转换流:
        InputStreamReader:将输入的字节流转换为输入的字符流
        OutputStreamWriter:将输出的字符流转换为输出的字节流,可以被查看

装饰设计模式:动态的给对象添加一些额外的功能,如:处理流对节点流的包装(增加了传输速度)

对象流及序列化:
对象的序列化:允许把内存中的java对象转换成与平台无关的二进制流,从而允许把这种二进制流长久的保存在磁盘上,或通过网络
            将这种二进制流传输到另一个网络节点(序列化).当其他程序获取了这个二进制流就可以恢复成原来的Java对象(反序列化).

对象序列化要求:
                1.必须实现接口:Serializable
                2.必须提供一个全局常量:serialVersionUID,用来对序列化对象进行版本控制,若类的变量发生了变化
                                    ,该值可能会改变,故建议显示声明
                    该常量是用来标识指定类的,当类做出修改时,相关对象还是通过该全局常量找到对应的类
                3.还必须保证其内部的所有属性都是可以序列化的
                补充 : 被static和transient修饰的变量不能被序列化

NIO:与IO具有同样的作用和目的,但使用方式完全不同,NIO是支持面象缓冲区的(更快),jdk4中出现了NIO但使用不多,
    jdk7中NIO.2使用更加重要

NIO2 : Path,Paths和Files类的使用
