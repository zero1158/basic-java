
CountDownLatch :让一些线程堵塞直到另一些线程完成一系列操作后才被唤醒,主要有两个方法,一个是await()方法,
    调用该方法的线程会被堵塞,其他线程调用countDown()方法会将计数器减1(调用countDown()的方法不会被堵塞),
    当计数器变为0时,因调用await()方法被堵塞的线程会被唤醒

CyclicBarrier :循环屏障,与CountDownLatch不同,是通过每次计数器加1,直到计数器到指定值,被阻塞的线程才会被唤醒

Semaphore(信号量) :特点是计数器可以增,也可以减,将一个共享资源锁定,则计数器减1,而后将共享资源释放,计数器加1,
    举列说明 :排队吃饭,一桌吃完,下一桌进入
    信号量主要用于两个目的 :
        一个是用于多个共享资源的互斥作用,
        一个用于并发线程数控制

总结 : 上述三类都是属于线程间通信,相当于帮我们省去了阻塞wait(),唤醒notify()方法的频繁调用